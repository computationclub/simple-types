grammar Parser.Grammar

expression        <-  _* (statement / type) _*               %term_expression

# ==============================================================================

lambda            <-  "λ" / "\\"
arrow             <-  "→" / "->"
darrow            <-  "⇒" / "=>"
times             <-  "×" / "*"
_                 <-  [ \n\r\t]

# ==============================================================================

statement         <-  sequence
                   /  control

control           <-  abstraction
                   /  if_term
                   /  let_binding
                   /  sum_case
                   /  var_case
                   /  assignment
                   /  term

term              <-  ascribed_term
                   /  ascribable

ascribable        <-  application
                   /  app_base

app_base          <-  builtin_fn
                   /  atom

builtin_fn        <-  succ_term
                   /  pred_term
                   /  iszero_term
                   /  inject_term
                   /  nil_term
                   /  cons_term
                   /  isnil_term
                   /  head_term
                   /  tail_term
                   /  ref_term

atom              <-  dereference
                   /  projection
                   /  proj_base

proj_base         <-  paren_term
                   /  true_term
                   /  false_term
                   /  zero_term
                   /  unit_term
                   /  variable
                   /  pair_term
                   /  tuple_term
                   /  record_term

# ==============================================================================

paren_term        <-  "(" _* statement _* ")"                     %paren_expr

sequence          <-  control _* ";" _* statement                 %term_seq

ascribed_term     <-  ascribable _+ "as" _+ type                  %term_ascribe

                   /  "<" _* label _* "=" _* control _* ">"
                      _+ "as" _+ type                             %term_tagged

# ==============================================================================

application       <-  app_base (_+ atom)+                         %term_app

abstraction       <-  lambda _* parameter _* ":" _* type
                      _* "." _* statement                         %term_abs

parameter         <-  variable / "_" %term_var

variable          <-  [a-z] ![a-z]                                %term_var

# ==============================================================================

true_term         <-  "true"                                      %term_true
false_term        <-  "false"                                     %term_false
if_term           <-  "if" _+ term _+ "then" _+
                      term _+ "else" _+ term                      %term_if

# ==============================================================================

zero_term         <-  "0"                                         %term_zero
succ_term         <-  "succ" _+ atom                              %term_succ
pred_term         <-  "pred" _+ atom                              %term_pred
iszero_term       <-  "iszero" _+ atom                            %term_iszero

# ==============================================================================

unit_term         <-  "unit"                                      %term_unit

# ==============================================================================

let_binding       <-  "let" _+ variable _* "=" _*
                      term _+ "in" _+ term                        %term_let

# ==============================================================================

projection        <-  proj_base (_* "." _* proj_field)+           %term_project
proj_field        <-  label / [1-9] [0-9]*

pair_term         <-  "{" _* control _* "|" _* control _* "}"     %term_pair

tuple_term        <-  "{" _* control _* ("," _* control _*)+ "}"  %term_tuple

record_term       <-  "{" record_pair ("," record_pair)* "}"      %term_record
record_pair       <-  _* label _* "=" _* control _*
label             <-  [A-Za-z0-9_-]+

# ==============================================================================

inject_term       <-  ("inl" / "inr") _+ ascribable               %term_inject

sum_case          <-  "case" _+ term _+ "of" _+
                      "inl" _+ sum_clause _* "|" _*
                      "inr" _+ sum_clause                         %term_sum_case

sum_clause        <-  variable _* darrow _* term                  %term_sum_clause

var_case          <-  "case" _+ term _+ "of" _+
                      var_clause (_* "|" _* var_clause)*          %term_var_case

var_clause        <-  "<" _* label _* "=" _* variable _* ">"
                      _* darrow _* term                           %term_var_clause

# ==============================================================================

nil_term          <-  "nil" _* "[" _* type _* "]"                 %term_nil

cons_term         <-  "cons" _* "[" _* type _* "]" _*
                      atom _+ atom                                %term_cons

isnil_term        <-  "isnil" _* "[" _* type _* "]" _* atom       %term_isnil
head_term         <-  "head" _* "[" _* type _* "]" _* atom        %term_head
tail_term         <-  "tail" _* "[" _* type _* "]" _* atom        %term_tail

# ==============================================================================

ref_term          <-  "ref" _+ atom                               %term_ref
dereference       <-  "!" _* atom                                 %term_deref
assignment        <-  term _* ":=" _* control                     %term_assign

# ==============================================================================

type              <-  function_type
                   /  func_operand

func_operand      <-  sum_type
                   /  sum_part

sum_part          <-  product_type
                   /  product_part

product_part      <-  paren_type
                   /  boolean_type
                   /  numeric_type
                   /  unit_type
                   /  top_type
                   /  list_type
                   /  ref_type
                   /  base_type
                   /  tuple_type
                   /  record_type
                   /  variant_type

# ==============================================================================

paren_type        <-  "(" _* type _* ")"                          %paren_expr

function_type     <-  func_operand _* arrow _* type               %type_func

sum_type          <-  sum_part _* "+" _* func_operand             %type_sum

product_type      <-  product_part _* times _* sum_part           %type_pair

boolean_type      <-  "Bool" ![A-Za-z]                            %type_bool

numeric_type      <-  "Nat" ![A-Za-z]                             %type_nat

unit_type         <-  "Unit" ![A-Za-z]                            %type_unit

top_type          <-  "Top"  ![A-Za-z]                            %type_top

list_type         <-  "List" _+ product_part                      %type_list

ref_type          <-  "Ref" _+ product_part                       %type_ref

base_type         <-  [A-Z] [A-Za-z]*                             %type_base

tuple_type        <-  "{" _* type _* ("," _* type _*)+ "}"        %type_tuple

record_type       <-  "{" rt_pair ("," rt_pair)* "}"              %type_record
rt_pair           <-  _* label _* ":" _* type _*

variant_type      <-  "<" rt_pair ("," rt_pair)* ">"              %type_variant
